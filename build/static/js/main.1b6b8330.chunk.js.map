{"version":3,"sources":["assets/imgs/weather.svg","service/storageService.js","assets/imgs/logo.svg","cmps/Navbar.jsx","service/weatherService.js","cmps/CityMinified.jsx","cmps/EmptyState.jsx","store/actions/cityActions.js","service/favoriteService.js","store/actions/favoriteActions.js","pages/Favorites.jsx","cmps/CitySearch.jsx","cmps/MinifiedWeather.jsx","cmps/MainWeather.jsx","pages/Weather.jsx","cmps/UserPrefToggles.jsx","store/actions/userPrefsActions.js","App.js","serviceWorker.js","store/reducers/favoritesReducer.js","store/reducers/CityReducer.js","store/reducers/userPrefsReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["module","exports","storageService","loadFromStorage","key","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","Navbar","connect","state","darkMode","userPrefsReducer","isCelsius","className","activeClassName","to","weatherService","getCityCurrWeather","getCityByName","getWeatherForecast","getWeatherIcon","iconNum","getCityByCoords","convertCelsiusToFahrenheit","degrees","Math","round","getApiKey","API_KEY","locationKey","a","apiKey","_HTTPget","cityCurrWeather","console","log","cityForecast","lat","lng","city","partialName","cities","url","fetch","res","json","data","Promise","resolve","reject","apiKeys","i","length","CityMinified","onRemoveFavorite","onSelectCity","useState","currWeather","setCurrWeather","Key","useEffect","_setCurrWeather","onClick","IsDayTime","getIsDay","Tooltip","title","ev","stopPropagation","LocalizedName","Country","Fragment","Temperature","Metric","Imperial","Value","Unit","getWeatherInScale","src","WeatherIcon","alt","CircularProgress","weatherImg","require","EmptyState","history","useHistory","push","setCurrCity","dispatch","type","favoriteService","setFavorites","favorites","getFavorites","mapDispatchToProps","getFavoritesFromStorage","Favorites","favoriteReducer","props","filter","map","_CitySearch","searchField","isCitiesListOpen","ref","React","createRef","getCitiesByName","Boolean","setState","cityName","find","onCloseCitiesList","onOpenCitiesList","onChange","target","value","Autocomplete","this","style","width","options","renderInput","params","TextField","label","margin","variant","Component","CitySearch","currCity","cityReducer","MinifiedWeather","dailyForecast","day","Date","EpochDate","toDateString","scale","temp","minTemp","Minimum","maxTemp","Maximum","getMinMaxTemperature","Day","Icon","_MainWeather","weatherForecast","setUserLocation","loc","coords","latitude","longitude","toggleFavoriteStatus","shouldAddFavorite","getFavoriteIcon","isFavorite","findIndex","IconButton","getCurrentDegrees","getCityWeather","navigator","geolocation","getCurrentPosition","prevProps","WeatherText","DailyForecasts","MainWeather","Weather","setDarkMode","isDark","setCelsius","UserPrefToggles","isOpen","setOpen","useRef","anchorEl","current","transformOrigin","vertical","horizontal","open","onClose","FormGroup","MenuItem","FormControlLabel","control","Switch","checked","logo","App","view","setView","location","useLocation","pathname","includes","handleChange","newValue","path","displayMode","index","onSwitching","enableMouseEvents","BottomNavigation","event","BottomNavigationAction","icon","window","hostname","match","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b6b8330.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather.cf735531.svg\";","function loadFromStorage(key) {\n    var val = localStorage.getItem(key)\n    return (val) ? JSON.parse(val) : null;\n}\n\nfunction saveToStorage(key, val) {\n    localStorage[key] = JSON.stringify(val);\n}\n\n\nexport const storageService = {\n    loadFromStorage,\n    saveToStorage\n}","module.exports = __webpack_public_path__ + \"static/media/logo.1ecdd7e1.svg\";","import React from 'react'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\n\nfunction _Navbar() {\n\n    return (\n        <nav>\n            <div className=\"navbar\">\n                <NavLink activeClassName=\"navlink-active\" className=\"navlink\" to=\"/city\">\n                    City View\n                </NavLink>\n                <NavLink activeClassName=\"navlink-active\" className=\"navlink\" to=\"/favorites\">\n                    Favorites\n                </NavLink>\n            </div>\n        </nav>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    darkMode: state.userPrefsReducer.darkMode,\n    isCelsius: state.userPrefsReducer.isCelsius    \n})\n\n\nexport const Navbar = connect(mapStateToProps)(_Navbar)","\nexport const weatherService = {\n    getCityCurrWeather,\n    getCityByName,\n    getWeatherForecast,\n    getWeatherIcon,\n    getCityByCoords,\n    convertCelsiusToFahrenheit,\n    getApiKey\n}\n\nvar API_KEY = getApiKey()\n\nasync function getCityCurrWeather(locationKey) {\n    const apiKey = await API_KEY\ntry {\n    const cityCurrWeather = await _HTTPget(`https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${apiKey}&details=true`)\n    return cityCurrWeather\n} catch (err) {\n    console.log(err)\n    throw err\n}\n}\n\nasync function getWeatherForecast(locationKey, isCelsius = true) {\n    const apiKey = await API_KEY\n    \n    try {\n    const cityForecast = await _HTTPget(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${apiKey}&metric=${isCelsius}`)\n    return cityForecast\n} catch (err) {\n    console.log(err)\n    throw err\n}\n}\n\nasync function getCityByCoords(lat, lng) {\n    const apiKey = await API_KEY\n    \n    try {\n        const city = await _HTTPget(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${apiKey}&q=${lat},${lng}`)\n        return city\n    } catch (err) {\n        console.log(err)\n        throw err\n    }\n}\n\nasync function getCityByName(partialName) {\n    const apiKey = await API_KEY\n    try {\n        const cities = await _HTTPget(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${partialName}`)\n        return cities\n\n    } catch (err) {\n        console.log(err)\n        throw err\n    }\n}\n\nfunction convertCelsiusToFahrenheit(degrees) {\n    return Math.round((degrees * (9 / 5) + 32) * 10) / 10\n}\n\nfunction getWeatherIcon(iconNum) {\n    if (iconNum < 10) iconNum = '0' + iconNum\n    return `https://developer.accuweather.com/sites/default/files/${iconNum}-s.png`\n}\n\nasync function _HTTPget(url) {\n    let data;\n    \n    try {\n\n        const res = await fetch(url)\n        data = await res.json()\n        return data\n    } catch (err) {\n        console.log(err)\n        throw err\n    }\n}\n\nasync function getApiKey() {\n  \n    // // I added this in order to bypass the 50 calls per day per API key.\n\n    return new Promise(async (resolve,reject) => {\n        const apiKeys = ['x6SNjBEgOiwSoE0Sm7AFRco0OWsPxKcT', 'jbQCGr5hw3CneCAiXlvKodc3ASLREpxy', '17nM18URNW0l13ncG90uLIxINREYuwzk']\n        for (let i = 0; i < apiKeys.length; i++) {\n            try {\n                await _HTTPget(`https://dataservice.accuweather.com/currentconditions/v1/215836?apikey=${apiKeys[i]}&details=true`)\n                resolve(apiKeys[i])\n                return apiKeys[i]\n            } catch (err) {\n                console.log('API key not working - switching to next one')\n            }\n        }    \n        console.log('no keys')\n        reject()\n        return 'No keys available'\n    })\n}","import { CircularProgress, Tooltip } from '@material-ui/core'\nimport { weatherService } from '../service/weatherService'\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nimport React, { useEffect, useState } from 'react'\n\n\nexport function CityMinified({ city, onRemoveFavorite, isCelsius, darkMode, onSelectCity }) {\n\n    const [currWeather, setCurrWeather] = useState(null)\n    \n\n    useEffect(() => {\n        if (!currWeather) _setCurrWeather()\n\n    }, [city])\n\n\n    function getIsDay() {\n        if (!currWeather) return\n        return (currWeather.IsDayTime) ? 'day-time' : 'night-time'\n    }\n\n    function onUnfavorite(ev) {\n        ev.stopPropagation()\n        onRemoveFavorite(city.Key)\n    }\n\n    async function _setCurrWeather() {\n        const cityCurrWeather = await weatherService.getCityCurrWeather(city.Key)\n        setCurrWeather(cityCurrWeather[0])\n    }\n\n    function getWeatherInScale() {\n        const { Metric, Imperial } = currWeather.Temperature\n        return (isCelsius) ? `${Metric.Value}${Metric.Unit}` : `${Imperial.Value}${Imperial.Unit}`\n    }\n    \n    return (\n\n        <div onClick={() => onSelectCity(city)} className={`mini-city-container ${(darkMode) ? 'dark' : 'light'} ${getIsDay()}`} >\n            <div className=\"unfavorite-container\">\n                <Tooltip title=\"Unfavorite city\">\n                        <FavoriteIcon onClick={onUnfavorite}/>\n                </Tooltip>\n            </div>\n            <div className=\"mini-city-title\">\n                <h4>{city.LocalizedName}</h4>\n                <h5>{city.Country.LocalizedName}</h5>\n            </div>\n            <div className=\"mini-city-weather\">\n                {(currWeather) ? (\n                    <React.Fragment>\n                        <div className=\"temp\">{getWeatherInScale()}</div><div className=\"icon\">\n                            <img src={weatherService.getWeatherIcon(currWeather.WeatherIcon)} alt=\"weather-icon\" />\n                        </div>\n                    </React.Fragment>)\n                    : <CircularProgress />}\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nconst weatherImg = require('../assets/imgs/weather.svg')\n\nexport function EmptyState() {\n\n    const history = useHistory()\n\n    return (\n        <div className=\"favorites-empty-state\">\n            <h2>Oops! looks like you havent added any favorites yet</h2>\n            <h3 className=\"cta\" onClick={() => history.push('/city')}>Why not add some now?</h3>\n            <div className=\"empty-state-img\">\n                <img src={weatherImg} alt=\"empty-state-img\" />\n            </div>\n        </div>\n    )\n}\n","\n\nexport function setCurrCity(city) {\n    return dispatch => {\n        dispatch({type:'SET_CITY',city})\n    }\n}","const { storageService } = require(\"./storageService\");\n\nexport const favoriteService = {\n    setFavorites,\n    getFavorites\n}\n\nfunction setFavorites(favorites) {\n    return new Promise(resolve => {\n        storageService.saveToStorage('favorites', favorites)\n        resolve(true)\n    })\n}\n\nfunction getFavorites() {\n    return new Promise(resolve => {\n        let favorites = storageService.loadFromStorage('favorites')\n        if (!favorites) favorites = []\n        return resolve(favorites)\n    })\n}","import { favoriteService } from \"../../service/favoriteService\"\n\nexport  function setFavorites(favorites) {\n    return async dispatch => {\n        await favoriteService.setFavorites(favorites)\n        dispatch({type:'SET_FAVORITES',favorites})\n    }\n}\n\nexport function getFavoritesFromStorage() {\n    return async dispatch => {\n        const favorites = await favoriteService.getFavorites()\n        dispatch({type:'SET_FAVORITES',favorites})\n    }\n}","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { useHistory } from 'react-router-dom';\nimport { CityMinified } from '../cmps/CityMinified';\nimport { EmptyState } from '../cmps/EmptyState';\nimport { setCurrCity } from '../store/actions/cityActions';\nimport { getFavoritesFromStorage, setFavorites } from '../store/actions/favoriteActions';\n\nfunction _Favorites(props) {\n\n\n    const history = useHistory()\n\n    useEffect(() => {\n        props.getFavoritesFromStorage()\n    }, [])\n\n    function onRemoveFavorite(locationKey) {\n        let favorites = [...props.favorites];\n        favorites = favorites.filter(city => city.Key !== locationKey)\n        props.setFavorites(favorites)\n    }\n\n    function onSelectCity(city) {\n        props.setCurrCity(city)\n        history.push('/city')\n    }\n\n    return (\n        <main className=\"favorites-section\">\n            {(props.favorites.length) ? (props.favorites.map(city => <CityMinified \n            key={city.Key} \n            isCelsius={props.isCelsius} \n            onRemoveFavorite={onRemoveFavorite} \n            darkMode={props.darkMode} \n            onSelectCity={onSelectCity} \n            city={city} />)) : <EmptyState />}\n        </main>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        favorites: state.favoriteReducer.favorites,\n        isCelsius: state.userPrefsReducer.isCelsius,\n        darkMode: state.userPrefsReducer.darkMode\n    }\n}\nconst mapDispatchToProps = {\n    setFavorites,\n    setCurrCity,\n    getFavoritesFromStorage\n}\nexport const Favorites = connect(mapStateToProps, mapDispatchToProps)(_Favorites)","import { TextField } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { weatherService } from '../service/weatherService'\nimport { setCurrCity } from '../store/actions/cityActions'\n\n\nclass _CitySearch extends Component {\n    state = {\n        searchField: '',\n        cities: [],\n        isCitiesListOpen: false\n    }\n\n    ref = React.createRef()\n\n    getCitiesByName = async () => {\n        const cities = await weatherService.getCityByName(this.state.searchField)\n        if (!cities) return\n        const isCitiesListOpen = Boolean(cities.length)\n        this.setState({ cities, isCitiesListOpen })\n    }\n\n    onSelectCity = (ev,cityName) => {\n        if (!cityName) return\n        const city = this.state.cities.find(city => city.LocalizedName === cityName)\n        this.props.setCurrCity(city)\n        this.onCloseCitiesList()\n\n    }\n\n    onOpenCitiesList = () => {\n        if (!this.state.cities || this.state.cities.length) return\n        this.setState({ isCitiesListOpen: true })\n    }\n\n    onCloseCitiesList = () => {\n        this.setState({ isCitiesListOpen: false })\n    }\n\n    onChange = (ev) => {\n        this.setState({ searchField: ev.target.value }, this.getCitiesByName)\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"search-container\">\n                <Autocomplete\n                    onChange={this.onSelectCity}\n                    style={{width:'fit-content'}}\n                    options={this.state.cities.map((city) => city.LocalizedName)}\n                    renderInput={(params) => (\n                        <TextField {...params} value={this.state.searchField} onChange={this.onChange} label=\"Find city\" style={{width: '20rem'}} margin=\"normal\" variant=\"outlined\" />\n                    )}\n                />\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = {\n    setCurrCity\n}\n\nconst mapStateToProps = state => {\n    return {\n        currCity: state.cityReducer.currCity,\n        darkMode: state.userPrefsReducer.darkMode\n    }\n}\n\nexport const CitySearch = connect(mapStateToProps, mapDispatchToProps)(_CitySearch)\n","import React from 'react'\nimport { weatherService } from '../service/weatherService'\n\nexport function MinifiedWeather({dailyForecast,darkMode,isCelsius}) {\n    \n    const day = new Date(dailyForecast.EpochDate * 1000).toDateString()\n    const scale = (isCelsius) ? 'C' : 'F'\n    \n    function getMinMaxTemperature() {\n        const temp = dailyForecast.Temperature\n        const minTemp = (isCelsius) ? temp.Minimum.Value : weatherService.convertCelsiusToFahrenheit(temp.Minimum.Value)\n        const maxTemp = (isCelsius) ? temp.Maximum.Value : weatherService.convertCelsiusToFahrenheit(temp.Maximum.Value)\n        return `${minTemp}${scale} - ${maxTemp}${scale}` \n    }\n\n\n    return (\n        <div className={'daily-forecast-day'}>\n            <div className={`daily-forecast-bg ${(darkMode) ? 'dark' : 'light'}`} />\n            <div className=\"daily-forecast-date\">\n                {day}\n            </div>\n            <div className=\"daily-forecast-temp\">\n                {getMinMaxTemperature()}\n            </div>\n            <div className=\"daily-forecast-icon\">\n                <img src={weatherService.getWeatherIcon(dailyForecast.Day.Icon)} alt=\"weather\" />\n            </div>\n        </div>\n    )\n}\n","import { CircularProgress, IconButton } from '@material-ui/core'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { weatherService } from '../service/weatherService'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { setFavorites } from '../store/actions/favoriteActions';\nimport { MinifiedWeather } from './MinifiedWeather';\nimport { setCurrCity } from '../store/actions/cityActions';\n\nexport class _MainWeather extends Component {\n\n    state = {\n        currWeather: null,\n        weatherForecast: null\n    }\n\n    componentDidMount() {\n        navigator.geolocation.getCurrentPosition(this.setUserLocation)\n    }\n    \n    componentDidUpdate(prevProps) {\n        if (prevProps.currCity !== this.props.currCity) {\n            this.getCityWeather()\n            this.getWeatherForecast()\n        }\n    }\n\n    setUserLocation = async(loc) => {\n        const {latitude,longitude} = loc.coords\n        const city = await  weatherService.getCityByCoords(latitude,longitude)\n        this.props.setCurrCity(city)\n    }\n\n\n    toggleFavoriteStatus = (shouldAddFavorite) => {\n        let favorites = [...this.props.favorites];\n        if (shouldAddFavorite) {\n            favorites.push(this.props.currCity)\n        } else {\n            favorites = favorites.filter(city => city.Key !== this.props.currCity.Key)\n        }\n        this.props.setFavorites(favorites)\n    }\n\n    getFavoriteIcon = () => {\n        const isFavorite = Boolean(this.props.favorites.findIndex(city => city.Key === this.props.currCity.Key) >= 0)\n        return (<IconButton onClick={() => this.toggleFavoriteStatus(!isFavorite)}>\n                    { (isFavorite) ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                </IconButton>)\n    }\n\n    getCurrentDegrees = () => {\n        const currWeather = this.state.currWeather\n        if (!currWeather) return <CircularProgress />\n\n        return (<React.Fragment>\n            {(this.props.isCelsius) ? `${currWeather.Temperature.Metric.Value} C` : `${currWeather.Temperature.Imperial.Value} F`}\n        </React.Fragment>)\n    }\n\n\n    getWeatherForecast = async() => {\n        const weatherForecast = await weatherService.getWeatherForecast(this.props.currCity.Key,this.props.isCelsius)\n        \n        this.setState({weatherForecast})\n    }\n\n    getCityWeather = async () => {\n        const currWeather = await weatherService.getCityCurrWeather(this.props.currCity.Key)\n        this.setState({ currWeather:currWeather[0] })\n    }\n\n    getIsDay = () => {\n        const {currWeather} = this.state\n        if (!currWeather) return\n        return (currWeather.IsDayTime) ? 'day-time' : 'night-time'\n    }\n\n    render() {\n        const { currCity } = this.props\n        if (!currCity) return <React.Fragment />\n        return (\n            <main className={`weather-container ${this.getIsDay()}`}>\n                <div className=\"weather-top\">\n                    <div className=\"city-details\">\n                        <div className=\"city-name\">{currCity.LocalizedName}, {currCity.Country.LocalizedName}</div>\n                        <div className=\"city-degrees\">{this.getCurrentDegrees()}</div>\n                    </div>\n                    <div className=\"favorite-container\">\n                        {this.getFavoriteIcon()}\n                    </div>\n                </div>\n                \n                    <div className=\"weather-main\">\n                    {(this.state.currWeather) ? (<React.Fragment>\n                        <img src={weatherService.getWeatherIcon(this.state.currWeather.WeatherIcon)} alt=\"weather-icon\"/>\n                    <h2>{this.state.currWeather.WeatherText}</h2>\n                    </React.Fragment>\n                    ) : <CircularProgress />\n                    }\n                </div> \n                \n                <div className=\"weather-forecast\">\n                 {(this.state.weatherForecast) ? this.state.weatherForecast.DailyForecasts.map(day => <MinifiedWeather key={day.EpochDate} darkMode={this.props.darkMode} isCelsius={this.props.isCelsius} dailyForecast={day} /> ) : <CircularProgress />}\n                </div>\n            </main>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        currCity: state.cityReducer.currCity,\n        isCelsius: state.userPrefsReducer.isCelsius,\n        favorites: state.favoriteReducer.favorites,\n        darkMode: state.userPrefsReducer.darkMode\n    }\n}\n\nconst mapDispatchToProps = {\n    setFavorites,\n    setCurrCity\n}\n\nexport const MainWeather = connect(mapStateToProps,mapDispatchToProps)(_MainWeather)","import React from 'react'\nimport { CitySearch } from '../cmps/CitySearch'\nimport { MainWeather } from '../cmps/MainWeather'\n\nexport function Weather(props) {\n\n    return (\n        <main>\n            <CitySearch />\n            <MainWeather />\n        </main>\n    )\n}\n\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { FormControlLabel, FormGroup, IconButton, Menu, MenuItem, Switch, Tooltip } from '@material-ui/core';\nimport { setDarkMode, setCelsius } from '../store/actions/userPrefsActions'\n\nfunction _UserPrefToggles(props) {\n    const [isOpen, setOpen] = useState(false)\n    const ref = React.useRef()\n\n    return (\n        <div className=\"user-pref-toggles\">\n            <Tooltip title=\"User Preferences\">\n                <IconButton ref={ref} onClick={() => setOpen(true)}>\n                    <MenuIcon />\n                </IconButton>\n            </Tooltip>\n            <Menu anchorEl={ref.current} \n            transformOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n              }}\n              open={isOpen} onClose={() => setOpen(false)}>\n                <FormGroup>\n                    <MenuItem className=\"menu-item\">\n                        <span className=\"switch-off-state\">Light Mode</span>\n                        <FormControlLabel\n                            control={<Switch checked={props.darkMode} onChange={(ev) => props.setDarkMode(ev.target.checked)} />}\n                        />\n                        <span>Dark Mode</span>\n                    </MenuItem>\n                    <MenuItem>\n                        <span className=\"switch-off-state\">Fahrenheit</span>\n                        <FormControlLabel\n                            control={<Switch checked={props.isCelsius} onChange={(ev) => props.setCelsius(ev.target.checked)} />}\n                        />\n                        <span>Celsius</span>\n                    </MenuItem>\n                </FormGroup>\n            </Menu>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => ({\n    darkMode: state.userPrefsReducer.darkMode,\n    isCelsius: state.userPrefsReducer.isCelsius\n})\n\nconst mapDispatchToProps = {\n    setDarkMode,\n    setCelsius\n\n}\n\n\nexport const UserPrefToggles = connect(mapStateToProps, mapDispatchToProps)(_UserPrefToggles)","export function setCelsius(isCelsius) {\n    return dispatch => {\n        dispatch({type:'SET_DEGREE_SCALE',isCelsius})\n    }\n}\n\nexport function setDarkMode(isDark) {\n    return dispatch => {\n        dispatch({type:'SET_DARK_MODE',isDark})\n    }\n}","import { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport SwipeableViews from 'react-swipeable-views';\nimport { Navbar } from './cmps/Navbar';\nimport { Favorites } from './pages/Favorites';\nimport { Weather } from './pages/Weather';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { UserPrefToggles } from './cmps/UserPrefToggles';\nimport { connect } from 'react-redux';\n\n\nconst logo = require('./assets/imgs/logo.svg')\n\nfunction _App(props) {\n\n  const [view, setView] = useState(0)\n  const history = useHistory()\n  const location = useLocation()\n\n  useEffect(() => {\n    const view = (location.pathname.includes('favorites')) ? 1 : 0\n    setView(view)\n    \n  }, [location.pathname])\n\n  const handleChange = (newValue) => {\n    const path = (!newValue) ? 'city' : 'favorites'\n    // history.push(path)\n    history.push(path)\n  };\n\n  const displayMode = (props.darkMode) ? 'dark' : 'light'\n\n  return (\n    <div className={`App ${displayMode}`}>\n      <header className=\"App-header\">\n        <div className=\"logo-container\" onClick={() => history.push('/')}>\n          <img src={logo} alt=\"logo\" />\n        </div>\n        <Navbar />\n        <UserPrefToggles />\n      </header>\n      <SwipeableViews index={view} onSwitching={handleChange} enableMouseEvents={true} >\n\n        <Weather />\n        <Favorites />\n\n      </SwipeableViews>\n      <div className=\"bottom-navigation\">\n        <BottomNavigation className={displayMode} value={view} onChange={(event, newValue) => handleChange(newValue)}>\n          <BottomNavigationAction className={displayMode} label=\"City View\" icon={<WbSunnyIcon />} />\n          <BottomNavigationAction className={displayMode} label=\"Favorites\" icon={<FavoriteBorderIcon />} />\n        </BottomNavigation>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  darkMode: state.userPrefsReducer.darkMode\n})\n\nexport const App = connect(mapStateToProps)(_App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    favorites: []\n}\n\nexport function favoriteReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_FAVORITES':\n            return {\n                ...state,\n                favorites: action.favorites\n            }\n        default:\n            return state\n    }\n}","const initialState = {\n    currCity: null\n}\n\nexport function cityReducer(state = initialState, action) {\n    \n    switch (action.type) {\n        case 'SET_CITY':\n            return {\n                ...state,\n                currCity: action.city\n            }\n        default:\n            return state\n    }\n}","const initialState = {\n    darkMode: false,\n    isCelsius: true\n}\n\nexport function userPrefsReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_DEGREE_SCALE':\n            return {\n                ...state,\n                isCelsius: action.isCelsius\n            }\n        case 'SET_DARK_MODE':\n            return {\n                ...state,\n                darkMode: action.isDark\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport { favoriteReducer } from './favoritesReducer';\nimport { cityReducer } from './CityReducer'\nimport { userPrefsReducer} from './userPrefsReducer'\n\nconst rootReducer = combineReducers({\n    favoriteReducer,\n    cityReducer,\n    userPrefsReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index.js';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\nimport './assets/styles/global.scss';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    </BrowserRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}